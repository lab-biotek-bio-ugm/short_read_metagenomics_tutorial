[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Short Metagenomic Assembly Tutorial",
    "section": "",
    "text": "Tutorial ini diadaptasi dari https://www.hadriengourle.com/tutorials/meta_assembly/"
  },
  {
    "objectID": "index.html#pengantar",
    "href": "index.html#pengantar",
    "title": "Short Metagenomic Assembly Tutorial",
    "section": "",
    "text": "Tutorial ini diadaptasi dari https://www.hadriengourle.com/tutorials/meta_assembly/"
  },
  {
    "objectID": "index.html#tentang-dataset",
    "href": "index.html#tentang-dataset",
    "title": "Short Metagenomic Assembly Tutorial",
    "section": "Tentang Dataset",
    "text": "Tentang Dataset\nPada tutorial ini, kita akan mencoba menyusun MAGs dari 20 bakteri yang di sequence dengan teknologi Illumina HiSeq (yang disimulasikan dengan InSilicoSeq. Dataset ini diperoleh dari ekspedisi Tara Ocean (selengkapnya di figshare)"
  },
  {
    "objectID": "index.html#setup-conda",
    "href": "index.html#setup-conda",
    "title": "Short Metagenomic Assembly Tutorial",
    "section": "Setup Conda",
    "text": "Setup Conda\nmamba env create -f environment.yml"
  },
  {
    "objectID": "index.html#quality-control",
    "href": "index.html#quality-control",
    "title": "Short Metagenomic Assembly Tutorial",
    "section": "Quality Control",
    "text": "Quality Control\nmkdir -p data\n(cd data && curl -O -J -L https://osf.io/th9z6/download)\n(cd data && curl -O -J -L https://osf.io/k6vme/download)\n(cd data && chmod -w tara_reads_R*)\nmkdir -p results\n(cd results && ln -s ../data/tara_reads_* .)\n(cd results && fastqc tara_reads_*.fastq.gz)\n\nForwardReverse\n\n\n\n\nFull preview here\n\n\n\n\nFull preview here\n\n\n\n(cd results && sickle pe -f tara_reads_R1.fastq.gz -r tara_reads_R2.fastq.gz -t sanger \\\n    -o tara_trimmed_R1.fastq -p tara_trimmed_R2.fastq -s /dev/null)\n\n\nOutput\n\nFastQ paired records kept: 2995072 (1497536 pairs)\nFastQ single records kept: 2460 (from PE1: 2366, from PE2: 94)\nFastQ paired records discarded: 0 (0 pairs)\nFastQ single records discarded: 2460 (from PE1: 94, from PE2: 2366)"
  },
  {
    "objectID": "index.html#assembly",
    "href": "index.html#assembly",
    "title": "Short Metagenomic Assembly Tutorial",
    "section": "Assembly",
    "text": "Assembly\nAssembly genome akan kita lakukan dengan menggunakan Megahit, sebuah metagenome assembler berbasis de Bruijn Graph.\n(cd results && megahit -1 tara_trimmed_R1.fastq -2 tara_trimmed_R2.fastq -o tara_assembly)\n\n\nOutput\n\n2025-02-12 22:45:50 - MEGAHIT v1.2.9\n2025-02-12 22:45:50 - Using megahit_core with POPCNT and BMI2 support\n2025-02-12 22:45:50 - Convert reads to binary library\n2025-02-12 22:45:51 - b'INFO  sequence/io/sequence_lib.cpp  :   75 - Lib 0 (/home/matinnu/courses/short_read_metagenomics_tutorial/results/tara_trimmed_R1.fastq,/home/matinnu/courses/short_read_metagenomics_tutorial/results/tara_trimmed_R2.fastq): pe, 2995072 reads, 126 max length'\n2025-02-12 22:45:51 - b'INFO  utils/utils.h                 :  152 - Real: 1.0162\\tuser: 0.7983\\tsys: 0.3193\\tmaxrss: 184692'\n2025-02-12 22:45:51 - k-max reset to: 141 \n2025-02-12 22:45:51 - Start assembly. Number of CPU threads 22 \n2025-02-12 22:45:51 - k list: 21,29,39,59,79,99,119,141 \n2025-02-12 22:45:51 - Memory used: 15093769420\n2025-02-12 22:45:51 - Extract solid (k+1)-mers for k = 21 \n2025-02-12 22:46:11 - Build graph for k = 21 \n2025-02-12 22:46:17 - Assemble contigs from SdBG for k = 21\n2025-02-12 22:46:35 - Local assembly for k = 21\n2025-02-12 22:46:53 - Extract iterative edges from k = 21 to 29 \n2025-02-12 22:46:55 - Build graph for k = 29 \n2025-02-12 22:46:59 - Assemble contigs from SdBG for k = 29\n2025-02-12 22:47:17 - Local assembly for k = 29\n2025-02-12 22:47:30 - Extract iterative edges from k = 29 to 39 \n2025-02-12 22:47:32 - Build graph for k = 39 \n2025-02-12 22:47:36 - Assemble contigs from SdBG for k = 39\n2025-02-12 22:47:55 - Local assembly for k = 39\n2025-02-12 22:48:14 - Extract iterative edges from k = 39 to 59 \n2025-02-12 22:48:17 - Build graph for k = 59 \n2025-02-12 22:48:22 - Assemble contigs from SdBG for k = 59\n2025-02-12 22:48:40 - Local assembly for k = 59\n2025-02-12 22:49:03 - Extract iterative edges from k = 59 to 79 \n2025-02-12 22:49:05 - Build graph for k = 79 \n2025-02-12 22:49:09 - Assemble contigs from SdBG for k = 79\n2025-02-12 22:49:28 - Local assembly for k = 79\n2025-02-12 22:49:50 - Extract iterative edges from k = 79 to 99 \n2025-02-12 22:49:52 - Build graph for k = 99 \n2025-02-12 22:49:56 - Assemble contigs from SdBG for k = 99\n2025-02-12 22:50:15 - Local assembly for k = 99\n2025-02-12 22:50:42 - Extract iterative edges from k = 99 to 119 \n2025-02-12 22:50:44 - Build graph for k = 119 \n2025-02-12 22:50:48 - Assemble contigs from SdBG for k = 119\n2025-02-12 22:51:09 - Local assembly for k = 119\n2025-02-12 22:51:30 - Extract iterative edges from k = 119 to 141 \n2025-02-12 22:51:30 - Build graph for k = 141 \n2025-02-12 22:51:34 - Assemble contigs from SdBG for k = 141\n2025-02-12 22:51:49 - Merging to output final contigs \n2025-02-12 22:51:49 - 5826 contigs, total 23054620 bp, min 215 bp, max 2448145 bp, avg 3957 bp, N50 21953 bp\n2025-02-12 22:51:49 - ALL DONE. Time elapsed: 35\n\n(cd results && ln -s tara_assembly/final.contigs.fa .)\n(cd results && bowtie2-build final.contigs.fa final.contigs)\n(cd results && bowtie2 -x final.contigs -1 tara_reads_R1.fastq.gz -2 tara_reads_R2.fastq.gz | \\\n    samtools view -bS -o tara_to_sort.bam)\n(cd results && samtools sort tara_to_sort.bam -o tara.bam)\n(cd results && samtools index tara.bam)\n\n\nOutput\n\nSettings:\n  Output files: \"final.contigs.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 4\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  final.contigs.fa\nBuilding a SMALL index\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 5763655\nUsing parameters --bmax 4322742 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 4322742 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:01\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 0; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 2.88183e+06 (target: 4322741)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 8\n  Reserving size (4322742) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 4137201 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:01\nReturning block of 4137202 for bucket 1\nGetting block 2 of 8\n  Reserving size (4322742) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 2:\n  bucket 2: 10%\n  bucket 2: 20%\n  bucket 2: 30%\n  bucket 2: 40%\n  bucket 2: 50%\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 3179054 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 3179055 for bucket 2\nGetting block 3 of 8\n  Reserving size (4322742) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 2213233 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 2213234 for bucket 3\nGetting block 4 of 8\n  Reserving size (4322742) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 2638513 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:01\nReturning block of 2638514 for bucket 4\nGetting block 5 of 8\n  Reserving size (4322742) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 2630120 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 2630121 for bucket 5\nGetting block 6 of 8\n  Reserving size (4322742) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 3107963 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 3107964 for bucket 6\nGetting block 7 of 8\n  Reserving size (4322742) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 2715977 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:01\nReturning block of 2715978 for bucket 7\nGetting block 8 of 8\n  Reserving size (4322742) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 2432552 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 2432553 for bucket 8\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5752548\nfchr[G]: 11542726\nfchr[T]: 17335916\nfchr[$]: 23054620\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 12195856 bytes to primary EBWT file: final.contigs.1.bt2.tmp\nWrote 5763660 bytes to secondary EBWT file: final.contigs.2.bt2.tmp\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 23054620\n    bwtLen: 23054621\n    sz: 5763655\n    bwtSz: 5763656\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1440914\n    offsSz: 5763656\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 120077\n    numLines: 120077\n    ebwtTotLen: 7684928\n    ebwtTotSz: 7684928\n    color: 0\n    reverse: 0\nTotal time for call to driver() for forward index: 00:00:08\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to reverse reference sequence: 00:00:00\nbmax according to bmaxDivN setting: 5763655\nUsing parameters --bmax 4322742 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 4322742 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 2.88183e+06 (target: 4322741)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 8\n  Reserving size (4322742) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 1: 40%\n  bucket 1: 50%\n  bucket 1: 60%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block of length 3053661 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 3053662 for bucket 1\nGetting block 2 of 8\n  Reserving size (4322742) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 2:\n  bucket 2: 10%\n  bucket 2: 20%\n  bucket 2: 30%\n  bucket 2: 40%\n  bucket 2: 50%\n  bucket 2: 60%\n  bucket 2: 70%\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 2698885 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:01\nReturning block of 2698886 for bucket 2\nGetting block 3 of 8\n  Reserving size (4322742) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 3:\n  bucket 3: 10%\n  bucket 3: 20%\n  bucket 3: 30%\n  bucket 3: 40%\n  bucket 3: 50%\n  bucket 3: 60%\n  bucket 3: 70%\n  bucket 3: 80%\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 2218194 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 2218195 for bucket 3\nGetting block 4 of 8\n  Reserving size (4322742) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 2795622 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 2795623 for bucket 4\nGetting block 5 of 8\n  Reserving size (4322742) for bucket 5\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 2214292 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 2214293 for bucket 5\nGetting block 6 of 8\n  Reserving size (4322742) for bucket 6\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 6:\n  bucket 6: 10%\n  bucket 6: 20%\n  bucket 6: 30%\n  bucket 6: 40%\n  bucket 6: 50%\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 2133259 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:01\nReturning block of 2133260 for bucket 6\nGetting block 7 of 8\n  Reserving size (4322742) for bucket 7\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 7:\n  bucket 7: 10%\n  bucket 7: 20%\n  bucket 7: 30%\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 3879811 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 3879812 for bucket 7\nGetting block 8 of 8\n  Reserving size (4322742) for bucket 8\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 4060889 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 4060890 for bucket 8\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5752548\nfchr[G]: 11542726\nfchr[T]: 17335916\nfchr[$]: 23054620\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 12195856 bytes to primary EBWT file: final.contigs.rev.1.bt2.tmp\nWrote 5763660 bytes to secondary EBWT file: final.contigs.rev.2.bt2.tmp\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 23054620\n    bwtLen: 23054621\n    sz: 5763655\n    bwtSz: 5763656\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1440914\n    offsSz: 5763656\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 120077\n    numLines: 120077\n    ebwtTotLen: 7684928\n    ebwtTotSz: 7684928\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:08\nRenaming final.contigs.3.bt2.tmp to final.contigs.3.bt2\nRenaming final.contigs.4.bt2.tmp to final.contigs.4.bt2\nRenaming final.contigs.1.bt2.tmp to final.contigs.1.bt2\nRenaming final.contigs.2.bt2.tmp to final.contigs.2.bt2\nRenaming final.contigs.rev.1.bt2.tmp to final.contigs.rev.1.bt2\nRenaming final.contigs.rev.2.bt2.tmp to final.contigs.rev.2.bt2\n1499996 reads; of these:\n  1499996 (100.00%) were paired; of these:\n    1067143 (71.14%) aligned concordantly 0 times\n    432632 (28.84%) aligned concordantly exactly 1 time\n    221 (0.01%) aligned concordantly &gt;1 times\n    ----\n    1067143 pairs aligned concordantly 0 times; of these:\n      1048579 (98.26%) aligned discordantly 1 time\n    ----\n    18564 pairs aligned 0 times concordantly or discordantly; of these:\n      37128 mates make up the pairs; of these:\n        13221 (35.61%) aligned 0 times\n        16950 (45.65%) aligned exactly 1 time\n        6957 (18.74%) aligned &gt;1 times\n99.56% overall alignment rate\n[bam_sort_core] merging from 1 files and 1 in-memory blocks..."
  },
  {
    "objectID": "index.html#binning",
    "href": "index.html#binning",
    "title": "Short Metagenomic Assembly Tutorial",
    "section": "Binning",
    "text": "Binning\n(cd results && runMetaBat.sh -m 1500 final.contigs.fa tara.bam)\n(cd results && mv final.contigs.fa.metabat-bins1500* metabat)"
  }
]